# vim:set ft=sh:

function check_composer_syntax() {
  local target="$1"

  if [ -f "$target/composer.json" ]; then
      [ -z "$(cat "$target/composer.json")" ] && \
        error "composer.json is empty, remove it from GIT repository or fill its content."
      jq . < "$target/composer.json" >/dev/null 2>&1 || error "composer.json is not a valid JSON file."
  fi

  if [ -f "$target/composer.lock" ]; then
      [ -z "$(cat "$target/composer.lock")" ] && \
        error "composer.lock is empty, generate it with the composer command."
      jq . < "$target/composer.lock" >/dev/null 2>&1 || error "composer.lock is not a valid JSON file."
  fi
}

function check_composer_json_and_lock() {
  local target="$1"

  if [ ! -f "$target/composer.json" ]; then
      return 0
  fi

  if [ ! -f "$target/composer.lock" ]; then
      error "composer.lock has not been found, please lock the dependencies of your project."
  fi
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    # If there is no composer.json, we install nothing
    if [ ! -f "$target/composer.json" ] ; then
      return 0
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR
    mkdir -p "$target/vendor/composer/bin"

    local checksum=$(curl --silent "${SWIFT_URL}/composer/composer-${COMPOSER_VERSION}.phar.md5")

    status "Vendoring Composer ${COMPOSER_VERSION}"
    if [ ! -f "$CACHE_DIR/composer.phar.md5" ] || [ "$(cat $CACHE_DIR/composer.phar.md5)" != "$checksum" ]; then
        echo "Updating Composer" | indent
        curl --silent "${SWIFT_URL}/composer/composer-${COMPOSER_VERSION}.phar" > "$CACHE_DIR/composer.phar" | indent
        chmod a+x "$CACHE_DIR/composer.phar"
        echo "$checksum" > $CACHE_DIR/composer.phar.md5
    else
        echo "Checksums match. Fetching from cache."
    fi

    cp "$CACHE_DIR/composer.phar" "$target/vendor/composer/bin/"

    # Add composer to the path
    cp "$target/vendor/composer/bin/composer.phar" "$target/bin/composer"
    cp "$target/vendor/composer/bin/composer.phar" "$target/bin/composer.phar"

    local required_extensions=$(jq --raw-output '.require // {} | keys | .[]' < "$BUILD_DIR/composer.json" | grep '^ext-' | sed 's/^ext-//')
    if [ -n "$required_extensions" ]; then
        status "Bundling additional extensions"
        for ext in $required_extensions; do
            echo "$ext" | indent
            # TODO: Find a better way to ignore extensions which were not found in S3
            if [ "$ext" = "memcached" ] ; then
              fetch_package "libmemcached-${memcached_version}" "/app/vendor/libmemcached" | indent
            elif [ "$ext" = "gmp" ] ; then
              fetch_package "gmp-${gmp_version}" "/app/vendor/gmp" | indent
            elif [ "$ext" = "tidy" ] ; then
              fetch_package "libtidy-${tidy_version}" "/app/vendor/libtidy" | indent
            fi
            fetch_package "ext/$(php_api_version)/php-${ext}" "/app/vendor/php" 2>/dev/null || true | indent
        done
    fi

    if [ -n "$COMPOSER_GITHUB_TOKEN" ]; then
        status "Configuring the github authentication for Composer"
        php "vendor/composer/bin/composer.phar" config -g github-oauth.github.com "$COMPOSER_GITHUB_TOKEN" --no-interaction
    fi

    
    status "Installing application dependencies with Composer"
    {
        local devopt="--no-dev"
        local dev=${COMPOSER_DEV:=false}
        [ "x$dev" = "xtrue" ] && devopt="--dev"

        cd "$target"
	php "vendor/composer/bin/composer.phar" config http-basic.nova.laravel.com ${NOVA_USERNAME} ${NOVA_PASSWORD}
        php "vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction \
            $devopt
        cd "$cwd"
    } | indent
}

