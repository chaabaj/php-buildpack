#/usr/bin/env bash

set -e

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
source "$basedir/../conf/buildpack.conf"
source "$basedir/lib/utils"
source "$basedir/lib/swift"

export PATH=${basedir}/../vendor/bin:$PATH

if [ -z "$1" ]; then
    echo "Usage: $0 <version>" >&2
    exit 1
fi

php_version="$1"
php_series="$(echo $php_version | cut -d '.' -f1,2)"

if [ -z "$PHP_ZLIB_VERSION" ]; then
    PHP_ZLIB_VERSION=1.2.11
fi

echo "-----> Packaging PHP $php_version"

tempdir=$(mktmpdir php)
cd $tempdir

echo "-----> Downloading dependency zlib ${PHP_ZLIB_VERSION}"
curl -LO "${SWIFT_URL}/zlib/zlib-${PHP_ZLIB_VERSION}.tar.gz"
tar -xzvf "zlib-${PHP_ZLIB_VERSION}.tar.gz"

# If we're using the stack scalingo-14
# - it requires a custom libzip
libzip_flag=""
if [ "$STACK" = "scalingo-14" ] ; then
  echo "-----> Downloading dependency libzip ${zip_version}"
  mkdir /app/vendor/libzip -p
  curl -L -o - "${SWIFT_URL}/package/libzip-${zip_version}.tgz" | tar -C /app/vendor/libzip -xvz
  export C_INCLUDE_PATH="$C_INCLUDE_PATH:/app/vendor/libzip/include"
  libzip_flag="--with-libzip=/app/vendor/libzip"
fi

if [ "$STACK" != "scalingo-14" ] ; then
  echo "-----> Downloading dependency libonig ${libonig_version}"
  mkdir /app/vendor/libonig -p
  curl -L -o - "${SWIFT_URL}/package/libonig-${libonig_version}.tgz" | tar -C /app/vendor/libonig -xvz
  export C_INCLUDE_PATH="$C_INCLUDE_PATH:/app/vendor/libonig/include"
  export PKG_CONFIG_PATH="/app/vendor/libonig/lib/pkgconfig:$PKG_CONFIG_PATH"
fi

echo "-----> Downloading PHP $php_version"
curl -LO "https://php.net/distributions/php-${php_version}.tar.gz"
tar -xzvf "php-${php_version}.tar.gz"

install_zend_optimizer=":"

if [[ "$php_version" =~ 5.4.[0-9]+ ]]; then
    install_zend_optimizer=$(cat <<SH
    /app/vendor/php/bin/pecl install ZendOpcache-beta \
        && echo "zend_extension=\$(/app/vendor/php/bin/php-config --extension-dir)/opcache.so" > /app/vendor/php/etc/conf.d/opcache.ini
SH
)
else
    install_zend_optimizer=$(cat <<SH
    echo "zend_extension=opcache.so" > /app/vendor/php/etc/conf.d/opcache.ini
SH
)
fi

WITH_CURL_CONFIGURE=""
if [ -d '/app/.apt/usr' ] ; then
    WITH_CURL_CONFIGURE="--with-curl=/app/.apt/usr"
fi

# mysql is deprecated in 5.5 and removed in 7.0
# https://www.php.net/manual/en/intro.mysql.php
WITH_MYSQL_CONFIGURE=""
if [[ "${PHP_MODULE_API_VERSIONS["$php_series"]}" -lt "${PHP_MODULE_API_VERSIONS["7.0"]}" ]] ; then
  WITH_MYSQL_CONFIGURE="--with-mysql"
fi

# mcrypt is deprecated in PHP 7.1 and removed in 7.2
# https://www.php.net/manual/en/intro.mcrypt.php
WITH_MCRYPT_CONFIGURE=""
if [[ "${PHP_MODULE_API_VERSIONS["$php_series"]}" -lt "${PHP_MODULE_API_VERSIONS["7.2"]}" ]] ; then
  mkdir -p "/app/vendor/php/zlib" "/app/vendor/libmcrypt" \
  && curl "${SWIFT_URL}/package/libmcrypt-${mcrypt_version}.tgz" | tar xzv -C /app/vendor/libmcrypt
  WITH_MCRYPT_CONFIGURE="--with-mcrypt=/app/vendor/libmcrypt"
fi

# As of PHP 7.4 --enable-zip flag has been renamed --with-zip
WITH_ZIP_CONFIGURE="--with-zip"
if [[ "${PHP_MODULE_API_VERSIONS["$php_series"]}" -lt "${PHP_MODULE_API_VERSIONS["7.4"]}" ]] ; then
  WITH_ZIP_CONFIGURE="--enable-zip"
fi

WITH_ARGON_CONFIGURE=""
if [[ "${PHP_MODULE_API_VERSIONS["$php_series"]}" -ge "${PHP_MODULE_API_VERSIONS["7.2"]}" ]] ; then
  WITH_ARGON_CONFIGURE="--with-password-argon2"
fi

# As of PHP 7.4 --with-gd flag has been renamed --enable-gd
ENABLE_GD_CONFIGURE="--enable-gd --with-jpeg --with-freetype"
if [[ "${PHP_MODULE_API_VERSIONS["$php_series"]}" -lt "${PHP_MODULE_API_VERSIONS["7.4"]}" ]] ; then
  ENABLE_GD_CONFIGURE="--with-gd --with-jpeg-dir=/usr --with-png-dir=/usr --with-freetype-dir=/usr"
fi

mkdir -p "/app/vendor/php/etc/conf.d" \
&& pushd zlib-${PHP_ZLIB_VERSION} >/dev/null && ./configure --prefix=/app/vendor/php/zlib && make && make install && popd > /dev/null \
&& pushd php-${php_version} >/dev/null \
&& ./configure --prefix=/app/vendor/php \
--with-config-file-path=/app/vendor/php/etc \
--with-config-file-scan-dir=/app/vendor/php/etc/conf.d \
--enable-intl \
${ENABLE_GD_CONFIGURE} \
--enable-exif \
${WITH_MYSQL_CONFIGURE} \
--with-mysqli \
--with-pdo-mysql \
--with-pdo-sqlite \
--with-pdo-pgsql=/usr/bin/pg_config \
--with-pgsql \
--enable-shmop \
${WITH_ZIP_CONFIGURE} \
${WITH_CURL_CONFIGURE} \
${libzip_flag} \
--with-zlib=/app/vendor/php/zlib \
--with-bz2 \
--with-openssl \
--enable-soap \
--enable-xmlreader \
--with-xmlrpc \
--with-curl=/usr \
--with-xsl \
--enable-fpm \
--enable-mbstring \
--enable-pcntl \
--enable-sockets \
--enable-bcmath \
--with-readline \
${WITH_MCRYPT_CONFIGURE} \
${WITH_ARGON_CONFIGURE} \
--disable-debug \
&& echo ${php_version} | grep ^5.3 && sed -i '/^BUILD_/ s/\$(CC)/\$(CXX)/g' Makefile || true \
&& make \
&& make install \
&& popd > /dev/null \
&& eval $install_zend_optimizer

mkdir package
pushd /app/vendor/php > /dev/null
tar zcvf "${tempdir}/package/php-${php_version}.tgz" .
popd > /dev/null

echo "-----> Moving package to Swift"

swift_upload "package/php-${php_version}.tgz"

"$basedir/manifest" php
"$basedir/package-checksum" "php-${php_version}"

echo "-----> Done building PHP package!"
