#!/bin/bash

BUILD_DIR="$2"
CACHE_DIR="$3"
basedir="$( cd -P "$( dirname "$0" )" && pwd )"
source $basedir/../bin/common.sh

function test_symfony_flex() {
    jq --raw-output '.packages | .[] | .name' < "$1" | grep -q '^symfony/flex$'
}

function requires_symfony() {
    jq --raw-output '.packages | .[] | .name' < "$BUILD_DIR/composer.lock" | grep -q '^symfony/symfony$'
}

function requires_symfony_flex() {
  test_symfony_flex "$BUILD_DIR/composer.lock"
}

function sets_framework_symfony() {
    [ "$(jq --raw-output '.extra.heroku.framework' < "$BUILD_DIR/composer.json")" == "symfony" ]
}

function is_symfony2() {
    test -e "app/console"
}

function is_symfony3() {
    test -e "bin/console"
}

function is_symfony4() {
    test_symfony_flex "$BUILD_DIR/composer.lock"
}

function get_workdir() {
    is_symfony4 && echo -n "var" && return
    is_symfony3 && echo -n "var" && return
    is_symfony2 && echo -n "app" && return
}

function get_logdir() {
    is_symfony4 && echo -n "log" && return
    is_symfony3 && echo -n "logs" && return
    is_symfony2 && echo -n "logs" && return
}

function get_console() {
    is_symfony4 && echo -n "bin/console" && return
    is_symfony3 && echo -n "bin/console" && return
    is_symfony2 && echo -n "app/console" && return
}

case "$1" in
    detect)
        if [ ! -f "$BUILD_DIR/composer.lock" ]; then
            exit 1
        fi

        if requires_symfony || sets_framework_symfony || requires_symfony_flex; then
            echo "-----> Detected Symfony App"
            exit 0
        else
            exit 1
        fi
        ;;
    get-log-files)
        workdir=$(get_workdir)
        logdir=$(get_logdir)
        echo "$workdir/$logdir/prod.log" "$workdir/$logdir/dev.log"
        ;;
    compile)
        echo "-----> Setting up Symfony app"
        if is_symfony4; then
          cp "$basedir/../conf/nginx/symfony4.conf.erb" "$BUILD_DIR/conf/site.conf.erb"
        else
          cp "$basedir/../conf/nginx/symfony.conf.erb" "$BUILD_DIR/conf/site.conf.erb"
        fi
        ;;
    end)
        APP_DIR="/app"

        status "Warming up cache"

        workdir=$(get_workdir)
        console=$(get_console)
        rm -rf $workdir/cache/*
        php $console cache:warmup --env=prod --no-debug | indent

        if [ -d "$CACHE_DIR/$workdir/cache/prod" ] ; then
          status "Inplace replacment of $CACHE_DIR to $APP_DIR"
          find $CACHE_DIR/$workdir/cache/prod -type f -exec sed -i "s@$CACHE_DIR@$APP_DIR@g" {} \; | indent
          grep $CACHE_DIR/$workdir/cache/prod -r . && error "Could find some '$CACHE_DIR' :/ "
        fi

        status "End"
        ;;
esac
